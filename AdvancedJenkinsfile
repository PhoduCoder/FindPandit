pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout true
    }

    triggers {
        github(triggerOnPush: true, triggerOnPullRequest: true)
    }

    stages {
        stage('Build') {
            when {
                branch 'feature/*'
            }
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Dockerize') {
            when {
                branch 'feature/*'
            }
            steps {
                sh 'docker build -t my-image .'
                sh 'docker push my-image'
            }
        }
        stage('Deploy to Preprod') {
            when {
                branch 'feature/*'
            }
            steps {
                sh 'kubectl apply -f preprod.yaml'
            }
        }
        stage('Approval') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Approve for production deploy?'
            }
        }
        stage('Deploy to Prod') {
            when {
                branch 'main'
            }
            steps {
                sh 'kubectl apply -f prod.yaml'
            }
        }
    }
}
EXPLANATION
========
This Jenkinsfile uses github triggers to trigger the pipeline on push and pull request events.
Ensure that you have configured the Jenkins GitHub plugin and have set up the necessary credentials to interact with your GitHub repository.
Rest of the pipeline is same as previous pipeline, like it assumes that the kubeconfig and the necessary credentials are already setup in the Jenkins server, the project has a preprod and prod yaml files named preprod.yaml and prod.yaml, the image is pushed to a ECR repo named 'my-image', the stages are executed based on the branch name, in this example it assumes that all feature branches starts with 'feature/'
The deploy to prod stage is a manual approval stage, where someone has to approve the deploy to the prod cluster.

=======


Further Advanced Jenkins Pipeline using Shared Library

@Library('my-shared-library') _

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout true
    }

    triggers {
        github(triggerOnPush: true, triggerOnPullRequest: true)
    }

    stages {
        stage('Build') {
            when {
                branch 'feature/*'
            }
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Dockerize') {
            when {
                branch 'feature/*'
            }
            steps {
                sh 'docker build -t my-image .'
                pushToECR(image: 'my-image')
            }
        }
        stage('Deploy to Preprod') {
            when {
                branch 'feature/*'
            }
            steps {
                deployToK8s(env: 'preprod')
            }
        }
        stage('Approval') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Approve for production deploy?'
            }
        }
        stage('Deploy to Prod') {
            when {
                branch 'main'
            }
            steps {
                deployToK8s(env: 'prod')
            }
        }
    }
}

========
This Jenkinsfile assumes that you have created a shared library named my-shared-library that contains the following steps:

pushToECR(image: String): This step takes an image name as an argument and pushes it to an ECR repository. You'll need to configure the necessary credentials for your ECR repository in Jenkins.
deployToK8s(env: String): This step takes an environment name (e.g. 'preprod' or 'prod') as an argument and deploys the application to the corresponding Kubernetes cluster. You'll need to configure the necessary credentials for your Kubernetes cluster in Jenkins.
You can also include other shared steps in your shared library that can be used by other pipelines in your organization, such as steps for testing, linting, and so on.

Note:

The Jenkinsfile uses the @Library annotation to import the shared library, and then uses the steps defined in the shared library (pushToECR and deployToK8s) in the pipeline stages.
This Jenkinsfile uses the github triggers to trigger the pipeline on push and pull request events.
The rest of the pipeline is same as previous pipeline, like it assumes that the kubeconfig and the necessary credentials are already setup in the Jenkins server, the project has a preprod and prod yaml files named preprod.yaml and prod.yaml, the stages are executed based on the branch name, in this example it assumes that all feature branches starts with 'feature/'
The deploy to prod stage is a manual approval stage, where someone has to approve the deploy to the prod cluster.
========

ECR Shared Library 

// pushToECR step
def call(image) {
    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY', secretKeyVariable: 'AWS_SECRET_KEY']]) {
        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${awsAccountId}.dkr.ecr.us-east-1.amazonaws.com"
        sh "docker tag ${image} ${awsAccountId}.dkr.ecr.us-east-1.amazonaws.com/${image}:${env.BUILD_NUMBER}"
        sh "docker push ${awsAccountId}.dkr.ecr.us-east-1.amazonaws.com/${image}:${env.BUILD_NUMBER}"
    }
}

// deployToK8s step
def call(env) {
    withCredentials([[$class: 'KubeconfigCredentialsBinding', credentialsId: 'kubeconfig_credentials']]) {
        sh "kubectl apply -f ${env}.yaml"
    }
}

====

In the pushToECR step, it use the withCredentials block to provide the AWS credentials for your ECR repository. It uses the aws ecr get-login-password command to authenticate to ECR, then it tags the image with the build number and pushes it to the ECR repository.

In the deployToK8s step, it use the withCredentials block to provide the kubeconfig credentials for your kubernetes cluster. It uses the kubectl apply command to deploy the application to the cluster.

Note:

This is a sample code and should be modified according to your specific requirements.
The example above is using AWS ECR, if you are using a different repository, you might need to adjust the steps accordingly.
It is also using kubectl command to deploy to k8s cluster, if you are using different orchestration tool, you might need to adjust the steps accordingly.
The sample code assumes that the yaml files for k8s deployment are already present in the Jenkins workspace and are named as 'preprod.yaml' and 'prod.yaml'
Also the sample code assumes that the credentials for AWS and kubeconfig are already added to jenkins, and the credentials id are 'AWS_ACCESS_KEY','AWS_SECRET_KEY' and 'kubeconfig_credentials' respectively.
In order to use the shared library, you'll need to create it in Jenkins and make it available to the pipeline.
=====
